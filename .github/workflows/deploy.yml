name: lambda-deployment-with-github-action-test

on: 
  workflow_run:
    workflows: ["Node.js CI"]
    types:
      - completed

jobs:
  lambda-deploy:
    name: deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout to repo
        uses: actions/checkout@v2

      - name: Setup node environment ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install serverless globally (v3)
        run: npm install -g serverless@3

      - name: Install NestJS CLI globally
        run: npm install -g @nestjs/cli

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Install npm dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: nest build
        run: npm run build

      - name: Deploy lambda function
        run: sls deploy
        env:
          PORT: ${{ secrets.PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
